openapi: 3.1.0
info:
  title: Open Service Broker API
  description: The Open Service Broker API defines an HTTP(S) interface between Platforms
    and Service Brokers.
  contact:
    name: Open Service Broker API
    url: https://www.openservicebrokerapi.org/
    email: open-service-broker-api@googlegroups.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: master - might contain changes that are not yet released
externalDocs:
  description: The offical Open Service Broker API specification
  url: https://github.com/openservicebrokerapi/servicebroker/
servers:
- url: http://example.com
  description: Broker Endpoint
- url: http://localhost:3000
  description: OSB Checker - MockOSB
security:
- basicAuth: []
tags:
- name: Open Service Broker API Specification
paths:
  /v2/catalog:
    get:
      tags:
      - Catalog
      summary: get the catalog of services that the service broker offers
      operationId: catalog.get
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      responses:
        "200":
          description: catalog response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      x-swagger-router-controller: Catalog
  /v2/service_instances/**:
    get:
      tags:
      - ServiceInstances
      summary: get a service instance
      operationId: serviceInstance.get
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: service_id
        in: query
        description: id of the service associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceResource'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceInstances
    put:
      tags:
      - ServiceInstances
      summary: provision a service instance
      operationId: serviceInstance.provision
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: accepts_incomplete
        in: query
        description: asynchronous operations supported
        required: false
        style: form
        explode: true
        schema: {}
      requestBody:
        description: parameters for the requested service instance provision
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceInstanceProvisionRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceProvisionResponse'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceProvisionResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceAsyncOperation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceInstances
    delete:
      tags:
      - ServiceInstances
      summary: deprovision a service instance
      operationId: serviceInstance.deprovision
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: service_id
        in: query
        description: id of the service associated with the instance being deleted
        required: true
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance being deleted
        required: true
        style: form
        explode: true
        schema: {}
      - name: accepts_incomplete
        in: query
        description: asynchronous deprovision supported
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncOperation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceInstances
    patch:
      tags:
      - ServiceInstances
      summary: update a service instance
      operationId: serviceInstance.update
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: accepts_incomplete
        in: query
        description: asynchronous operations supported
        required: false
        style: form
        explode: true
        schema: {}
      requestBody:
        description: parameters for the requested service instance update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceInstanceUpdateRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceAsyncOperation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceInstances
  /v2/service_instances/**/last_operation:
    get:
      tags:
      - ServiceInstances
      summary: get the last requested operation state for service instance
      operationId: serviceInstance.lastOperation.get
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - name: service_id
        in: query
        description: id of the service associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: operation
        in: query
        description: a provided identifier for the operation
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          headers:
            Retry-After:
              description: Indicates when to retry the request
              required: false
              style: simple
              explode: false
              schema: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastOperationResource'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceInstances
  /v2/service_instances/**/service_bindings/{binding_id}/last_operation:
    get:
      tags:
      - ServiceBindings
      summary: get the last requested operation state for service binding
      operationId: serviceBinding.lastOperation.get
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - name: binding_id
        in: path
        description: binding id of service binding to find last operation applied
          to it
        required: true
        style: simple
        explode: false
        schema: {}
      - name: service_id
        in: query
        description: id of the service associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: operation
        in: query
        description: a provided identifier for the operation
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          headers:
            Retry-After:
              description: Indicates when to retry the request
              required: false
              style: simple
              explode: false
              schema: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastOperationResource'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceBindings
  /v2/service_instances/**/service_bindings/{binding_id}:
    get:
      tags:
      - ServiceBindings
      summary: get a service binding
      operationId: serviceBinding.get
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: binding_id
        in: path
        description: binding id of binding to fetch
        required: true
        style: simple
        explode: false
        schema: {}
      - name: service_id
        in: query
        description: id of the service associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceBindingResource'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceBindings
    put:
      tags:
      - ServiceBindings
      summary: generate a service binding
      operationId: serviceBinding.binding
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: binding_id
        in: path
        description: binding id of binding to create
        required: true
        style: simple
        explode: false
        schema: {}
      - name: accepts_incomplete
        in: query
        description: asynchronous operations supported
        required: false
        style: form
        explode: true
        schema: {}
      requestBody:
        description: parameters for the requested service binding
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceBindingRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceBindingResponse'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceBindingResponse'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncOperation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceBindings
    delete:
      tags:
      - ServiceBindings
      summary: deprovision a service binding
      operationId: serviceBinding.unbinding
      parameters:
      - $ref: '#/components/parameters/APIVersion'
      - $ref: '#/components/parameters/OriginatingIdentity'
      - name: binding_id
        in: path
        description: id of the binding being deleted
        required: true
        style: simple
        explode: false
        schema: {}
      - name: service_id
        in: query
        description: id of the service associated with the instance for which a binding
          is being deleted
        required: true
        style: form
        explode: true
        schema: {}
      - name: plan_id
        in: query
        description: id of the plan associated with the instance for which a binding
          is being deleted
        required: true
        style: form
        explode: true
        schema: {}
      - name: accepts_incomplete
        in: query
        description: asynchronous operations supported
        required: false
        style: form
        explode: true
        schema: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncOperation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "410":
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: ServiceBindings
components:
  schemas:
    Catalog:
      properties:
        services:
          items:
            $ref: '#/components/schemas/Service'
      example:
        services: ""
    Service:
      required:
      - bindable
      - description
      - id
      - name
      - plans
      properties:
        name: {}
        id: {}
        description: {}
        tags:
          items: {}
        requires:
          items:
            enum:
            - syslog_drain
            - route_forwarding
            - volume_mount
        bindable: {}
        metadata:
          $ref: '#/components/schemas/Metadata'
        dashboard_client:
          $ref: '#/components/schemas/DashboardClient'
        binding_rotatable: {}
        plan_updateable: {}
        plans:
          items:
            $ref: '#/components/schemas/Plan'
    DashboardClient:
      properties:
        id: {}
        secret: {}
        redirect_uri: {}
    Plan:
      required:
      - description
      - id
      - name
      properties:
        id: {}
        name: {}
        description: {}
        metadata:
          $ref: '#/components/schemas/Metadata'
        maintenance_info:
          $ref: '#/components/schemas/MaintenanceInfo'
        free:
          default: true
        bindable: {}
        schemas:
          $ref: '#/components/schemas/Schemas'
        maximum_polling_duration: {}
        plan_updateable: {}
        binding_rotatable:
          default: false
    Schemas:
      properties:
        service_instance:
          $ref: '#/components/schemas/ServiceInstanceSchema'
        service_binding:
          $ref: '#/components/schemas/ServiceBindingSchema'
    ServiceInstanceSchema:
      properties:
        create:
          $ref: '#/components/schemas/ServiceInstanceSchema_create'
        update:
          $ref: '#/components/schemas/ServiceInstanceSchema_create'
    ServiceBindingSchema:
      properties:
        create:
          $ref: '#/components/schemas/ServiceInstanceSchema_create'
    ServiceInstanceResource:
      properties:
        service_id: {}
        plan_id: {}
        dashboard_url: {}
        parameters:
          $ref: '#/components/schemas/Object'
        maintenance_info:
          $ref: '#/components/schemas/MaintenanceInfo'
        metadata:
          $ref: '#/components/schemas/ServiceInstanceMetadata'
      example:
        metadata:
          attributes: ""
          labels: ""
        maintenance_info:
          description: ""
          version: ""
        service_id: ""
        dashboard_url: ""
        parameters: ""
        plan_id: ""
    ServiceInstanceProvisionRequestBody:
      required:
      - plan_id
      - service_id
      properties:
        service_id: {}
        plan_id: {}
        context:
          $ref: '#/components/schemas/Context'
        parameters:
          $ref: '#/components/schemas/Object'
    ServiceInstanceProvisionResponse:
      properties:
        dashboard_url: {}
        metadata:
          $ref: '#/components/schemas/ServiceInstanceMetadata'
      example:
        metadata:
          attributes: ""
          labels: ""
        dashboard_url: ""
    ServiceInstanceAsyncOperation:
      properties:
        dashboard_url: {}
        operation: {}
        metadata:
          $ref: '#/components/schemas/ServiceInstanceMetadata'
    ServiceInstanceMetadata:
      properties:
        labels: {}
        attributes: {}
      example:
        attributes: ""
        labels: ""
    ServiceInstanceUpdateRequestBody:
      required:
      - service_id
      properties:
        context:
          $ref: '#/components/schemas/Context'
        service_id: {}
        plan_id: {}
        parameters:
          $ref: '#/components/schemas/Object'
        previous_values:
          $ref: '#/components/schemas/ServiceInstancePreviousValues'
    ServiceInstancePreviousValues:
      properties:
        service_id:
          deprecated: true
        plan_id: {}
    AsyncOperation:
      properties:
        operation: {}
    LastOperationResource:
      required:
      - state
      properties:
        state:
          enum:
          - in progress
          - succeeded
          - failed
        description: {}
        instance_usable: {}
        update_repeatable: {}
      example:
        instance_usable: ""
        update_repeatable: ""
        description: ""
        state: ""
    ServiceBindingResource:
      properties:
        metadata:
          $ref: '#/components/schemas/ServiceBindingMetadata'
        credentials:
          $ref: '#/components/schemas/Object'
        syslog_drain_url: {}
        route_service_url: {}
        volume_mounts:
          items:
            $ref: '#/components/schemas/ServiceBindingVolumeMount'
        endpoints:
          items:
            $ref: '#/components/schemas/ServiceBindingEndpoint'
        parameters:
          $ref: '#/components/schemas/Object'
      example:
        metadata:
          expires_at: ""
          renew_before: ""
        route_service_url: ""
        endpoints: ""
        credentials: ""
        syslog_drain_url: ""
        volume_mounts: ""
        parameters: null
    ServiceBindingRequest:
      required:
      - plan_id
      - service_id
      properties:
        context:
          $ref: '#/components/schemas/Context'
        service_id: {}
        plan_id: {}
        app_guid:
          deprecated: true
        bind_resource:
          $ref: '#/components/schemas/ServiceBindingResouceObject'
        parameters:
          $ref: '#/components/schemas/Object'
        predecessor_binding_id: {}
    ServiceBindingMetadata:
      properties:
        expires_at: {}
        renew_before: {}
      example:
        expires_at: ""
        renew_before: ""
    ServiceBindingResouceObject:
      properties:
        app_guid: {}
        route: {}
    ServiceBindingResponse:
      properties:
        metadata:
          $ref: '#/components/schemas/ServiceBindingMetadata'
        credentials:
          $ref: '#/components/schemas/Object'
        syslog_drain_url: {}
        route_service_url: {}
        volume_mounts:
          items:
            $ref: '#/components/schemas/ServiceBindingVolumeMount'
        endpoints:
          items:
            $ref: '#/components/schemas/ServiceBindingEndpoint'
      example:
        metadata:
          expires_at: ""
          renew_before: ""
        route_service_url: ""
        endpoints: ""
        credentials: ""
        syslog_drain_url: ""
        volume_mounts: ""
    ServiceBindingEndpoint:
      required:
      - host
      - ports
      properties:
        host: {}
        ports:
          items: {}
        protocol:
          default: tcp
          enum:
          - tcp
          - udp
          - all
    ServiceBindingVolumeMount:
      required:
      - container_dir
      - device
      - device_type
      - driver
      - mode
      properties:
        driver: {}
        container_dir: {}
        mode:
          enum:
          - r
          - rw
        device_type:
          enum:
          - shared
        device:
          $ref: '#/components/schemas/ServiceBindingVolumeMountDevice'
    ServiceBindingVolumeMountDevice:
      required:
      - volume_id
      properties:
        volume_id: {}
        mount_config:
          $ref: '#/components/schemas/Object'
    Context:
      description: "See [Context Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#context-object)\
        \ for more details."
    Metadata:
      description: "See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata)\
        \ for more details."
    MaintenanceInfo:
      required:
      - version
      properties:
        version: {}
        description: {}
      example:
        description: ""
        version: ""
    Object: {}
    Error:
      properties:
        error: {}
        description: {}
        instance_usable: {}
        update_repeatable: {}
      description: "See [Service Broker Errors](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors)\
        \ for more details."
    ServiceInstanceSchema_create:
      properties:
        parameters: {}
  parameters:
    APIVersion:
      name: X-Broker-API-Version
      in: header
      description: version number of the Service Broker API that the Platform will
        use
      required: true
      style: simple
      explode: false
      schema:
        default: "2.13"
    OriginatingIdentity:
      name: X-Broker-API-Originating-Identity
      in: header
      description: identity of the user that initiated the request from the Platform
      required: false
      style: simple
      explode: false
      schema: {}
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
